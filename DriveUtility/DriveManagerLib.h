// DriveManager.h : Declaration of the CDriveManager

#pragma once
class CDriveManager;
#include "resource.h"       // main symbols
#define STATIC_DRIVE_MANAGER_SYMBOLS
#include "SharedEnums.h"

using namespace amc_se;

   DRIVE_MANAGER_INTERFACE_ERRORS AbortFirmwareBurn(void* DriveManagerHandle);
   DRIVE_MANAGER_INTERFACE_ERRORS BurnFirmwareFile(void* DriveManagerHandle, std::string UpgradeFileName, std::string DowngradeFileName, int ReconfigureDrive, BURN_FIRMWARE_CODES* BurnEror);
   DRIVE_MANAGER_INTERFACE_ERRORS WriteByteArray(void* DriveManagerHandle, long BytesToWrite, BYTE *Array);
   DRIVE_MANAGER_INTERFACE_ERRORS ReadByteArray(void* DriveManagerHandle, long BytesToRead, long *BytesRead, BYTE *Array);
   DRIVE_MANAGER_INTERFACE_ERRORS SetDriveCommunicationInterface(void* DriveManagerHandle, DRIVE_MANAGER_COMMUNICATION_INTERFACES Interface);
   void PurgeRxQueue(void* DriveManagerHandle);
   void CommandEnableBridge(void* DriveManagerHandle);
   void CommandDisableBridge(void* DriveManagerHandle);
   void SetDisableBridgeOption(void* DriveManagerHandle, int Option);
   void SetDefaultProjectPath(void* DriveManagerHandle, std::string Path);
   void SetDriveDatabasePath(void* DriveManagerHandle, std::string DatabasePath);
   void SetDriveAddress(void* DriveManagerHandle, int Address);
   DRIVE_MANAGER_INTERFACE_ERRORS SetBaudRate(void* DriveManagerHandle, std::string BaudRate);
   std::string GetBaudRate(void* DriveManagerHandle);
   DRIVE_MANAGER_INTERFACE_ERRORS SetComPort(void* DriveManagerHandle, std::string ComPort);
   std::string GetComPort(void* DriveManagerHandle);
   PARAMETER_ERRORS SetParameterValueFloat(void* DriveManagerHandle, int Parameter, float Value);
   PARAMETER_ERRORS GetParameterValueFloat(void* DriveManagerHandle, int Parameter, float *Value);
   BOOL IsAvailable(void* DriveManagerHandle, int Parameter);
   void ClearFirmwareBurnData(void* DriveManagerHandle);
   int ReadProjectFromDrive(void* DriveManagerHandle);
   void RestoreDriveParameter(void* DriveManagerHandle);
   void StoreDriveParameter(void* DriveManagerHandle);
   int WriteProjectToDrive(void* DriveManagerHandle);
   void SetNormalTimeOut(void* DriveManagerHandle);
   int GetFirmwareBurnProgress(void* DriveManagerHandle, int * ErrorCode, std::string * ErrorString);
   void ExtendTimeOut(void* DriveManagerHandle);
   void SetParameterValueByteArray(void* DriveManagerHandle, int Parameter, int Size, unsigned char *ByteArray);
   int GetTraceDataSize(void* DriveManagerHandle);
   void GetTraceData(void* DriveManagerHandle, int TraceDepth, double* TraceData);
   void SetRollModeBlockSize(void* DriveManagerHandle, int Size);
   void ClearTraceData(void* DriveManagerHandle);
   void* GetAutoCommutationData(void* DriveManagerHandle);
   void SetAutoCommutationData(void* DriveManagerHandle, void* AutoCommData);
   PARAMETER_ERRORS SetParameterValueDouble(void* DriveManagerHandle, int Command, double Value);
   DRIVE_CONTROL_LOOP_MODES GetDriveModeState(void* DriveManagerHandle);
   DRIVE_CONTROL_LOOP_MODES GetDriveMode(void* DriveManagerHandle);
   int GetConnectionStatus(void* DriveManagerHandle);
   void SaveProject(void* DriveManagerHandle, std::string ProjectName, int SaveAsDriveVersion);
   int Disconnect(void* DriveManagerHandle);
   int OpenProject(void* DriveManagerHandle, std::string ProjectName);
   int GetNumberOfAnalogOutputs(void* DriveManagerHandle);
   int GetNumberOfAnalogInputs(void* DriveManagerHandle);
   int GetNumberOfDigitalOutputs(void* DriveManagerHandle);
   int GetNumberOfDigitalInputs(void* DriveManagerHandle);
   void AttemptToConnect(void* DriveManagerHandle);
   DRIVE_MANAGER_INTERFACE_ERRORS InitComPort(void* DriveManagerHandle);
   BOOL WriteParameterToDrive(void* DriveManagerHandle, int Parameter);
   PARAMETER_ERRORS SetParameterString(void* DriveManagerHandle, int Parameter, std::string String);
   PARAMETER_ERRORS GetParameterString(void* DriveManagerHandle, int Parameter, std::string* String);
   PARAMETER_ERRORS SetParameterValueInt(void* DriveManagerHandle, int Parameter, int Value);
   PARAMETER_ERRORS GetParameterValueInt(void* DriveManagerHandle, int Parameter, int* Value);
   PARAMETER_ERRORS GetParameterValueDouble(void* DriveManagerHandle, int Parameter, double* Value);
   std::string GetVersionString(void* DriveManagerHandle);
   int GetDriveAddress(void* DriveManagerHandle);
   DRIVE_MANAGER_INTERFACE_ERRORS GetDriveCommunicationInterface(void* DriveManagerHandle, DRIVE_MANAGER_COMMUNICATION_INTERFACES *Interface);
   BOOL ReadParameterFromDrive(void* DriveManagerHandle, ULONG Command);
   UINT GetFaultActionsAvailable(void* DriveManagerHandle, int parameter);
   PARAMETER_ERRORS SetDriveControlLoopMode(void* DriveManagerHandle, ULONG ControlLoopMode);
   PARAMETER_ERRORS SetParameterValueLongLong(void* DriveManagerHandle, int Parameter, long long Value);
   PARAMETER_ERRORS GetParameterValueLongLong(void* DriveManagerHandle, int Parameter, long long *Value);
   PVT_STATUS GetStatusOfPvtPointsSent(void* DriveManagerHandle);
   PVT_SPOOLER_ERRORS SendPvtPointsToDrive(void* DriveManagerHandle, PvtDataStructure* PvtDataArray, LONG NumberOfPvtPoints);
   void ClearPvtBuffer(void* DriveManagerHandle, unsigned short InDrive, unsigned short InSpooler);
   void InitializePvt(void* DriveManagerHandle);
   PVT_STATUS GetNumberOfPvtPointsInDrive(void* DriveManagerHandle, LONG* NumberOfPoints);
   void StartPvtMotion(void* DriveManagerHandle, unsigned int CobId);
   void EnableQuickStop(void* DriveManagerHandle, SHORT Enable);
   void ActivateHomingMethod(void* DriveManagerHandle, unsigned int Active);
   void LoadEpromParametersDefaults(void* DriveManagerHandle);
   void SetBridgeState(void* DriveManagerHandle, unsigned short PowerOn, unsigned short PositiveDirectionEnable, unsigned short NegativeDirectionEnable);
   PvtDataStructure GetLastPvtPointSentToDrive(void* DriveManagerHandle);
   void EnablePvtSpooler(void* DriveManagerHandle, unsigned short Enable);
   ULONG GetNumberOfPointsInPvtSpooler(void* DriveManagerHandle);
   ULONG GetPvtQuickStatus(void* DriveManagerHandle, unsigned short* PvtQuickStatus);
   std::string GetDriveLibrarySettings(void* DriveManagerHandle);
   void SetDriveLibrarySettings(void* DriveManagerHandle, std::string );
   int Connect(void* DriveManagerHandle, ULONG Id, std::string FileName);
   PVT_ARM_WARNINGS ArmPvtGenerator(void* DriveManagerHandle);
   ULONG SendWriteMessage(void* DriveManagerHandle, ULONG CobId, BYTE* Data, BYTE LengthOfData);
   ULONG SendReadMessage(void* DriveManagerHandle, ULONG CobId, BYTE* Data, BYTE LengthOfData, int *ReceivedByteCount);
   LONG CompareCurrentProjectAndDriveProjectSignature(void* DriveManagerHandle);
   BOOL GetExtendPosition(void* DriveManagerHandle, double* ExtendPosition);
   LONG CompareTheProjectVersionAndTheDriveVersion(void* DriveManagerHandle);
   PvtDataStructure GetLastPvtPointConsumedByTheDrive(void* DriveManagerHandle);
   DRIVE_MANAGER_INTERFACE_ERRORS GetNetworkDevices(void* DriveManagerHandle, long MaxNumDevices, long *NumDevices, DWORD *DeviceList);
   DRIVE_MANAGER_INTERFACE_ERRORS InitComPortByID(void* DriveManagerHandle, DWORD id);
   unsigned int ReadUserMemoryStorage(void* DriveManagerHandle, unsigned int StartAdress, unsigned int NumberOfWords , unsigned char* ReadBuffer);
   unsigned int WriteUserMemoryStorage(void* DriveManagerHandle, unsigned int StartAddress, unsigned int NumberOfWords, unsigned char* WriteBuffer);
   LONG SendMessageToDrive(void* DriveManagerHandle, BOOL Read, unsigned char* DataBuffer, unsigned int DataLength, unsigned int ResponseLength);
   ULONG SerialEncoderAccess(void* DriveManagerHandle, SerialEncoderCommands CommandEnum, ULONG MemoryAddress, unsigned short* Buffer, unsigned int *BufferSize);
   int GetPdoConfiguration(void* DriveManagerHandle, PdoTypes PdoType, PdoConfigurationStruct* Pdos);
   int SetPdoConfiguration(void* DriveManagerHandle, PdoTypes PdoType, PdoConfigurationStruct* Pdos);
   int GetCanObjects(void* DriveManagerHandle, CanObjectTypes ObjectType, unsigned int* NumberOfCanObjects, CanObjectStruct* CanObjects);
   void GetParameterValueByteArray(void* DriveManagerHandle, int Parameter, int Size, unsigned char *ByteArray);
   int GetCaptureStates(void* DriveManagerHandle, CaptureStates* States, DriveUpdateOptions Option);
   int SetCaptureStates(void* DriveManagerHandle, CaptureStates States, DriveUpdateOptions Option);
   int GetAuxiliaryEncoderIndexState(void* DriveManagerHandle, AuxiliaryEncoderIndexStates* State, DriveUpdateOptions Option);
   int SetAuxiliaryEncoderIndexState(void* DriveManagerHandle, AuxiliaryEncoderIndexStates State, DriveUpdateOptions Option);
   int GetPwmInputState(void* DriveManagerHandle, PwmInputStates* PwmInputState, DriveUpdateOptions Option);
   int SetPwmInputState(void* DriveManagerHandle, PwmInputStates State, DriveUpdateOptions Option);
   int GetPwmDirectionState(void* DriveManagerHandle, PwmDirectionStates* State, DriveUpdateOptions Option);
   int SetPwmDirectionState(void* DriveManagerHandle, PwmDirectionStates State, DriveUpdateOptions Option);
   int GetDriveModeConfiguration(void* DriveManagerHandle, LoopConfigurations LoopConfiguration, DriveModeConfiguration* Configuration, DriveUpdateOptions Option);
   int SetDriveModeConfiguration(void* DriveManagerHandle, LoopConfigurations Configuration, DriveModeConfiguration ModeConfiguration, DriveUpdateOptions Option);
   int GetActiveDriveMode(void* DriveManagerHandle, ActiveDriveMode* DriveMode, DriveUpdateOptions Option);
   int SetActiveDriveMode(void* DriveManagerHandle, ActiveDriveMode DriveMode, DriveUpdateOptions Option);
   CHAR IsProjectVersionEarlierThan(void* DriveManagerHandle, ProjectVersions ProjectVersion);
   CHAR ConvertProjectVersionTo(void* DriveManagerHandle, ProjectVersions ProjectVersion);
   ULONG PutStorage(void* DriveManagerHandle, StorageTypes StorageType, ULONG Length, BYTE* DataArray);
   ULONG GetStorage(void* DriveManagerHandle, StorageTypes StorageType, ULONG Length, BYTE* DataArray);
   ULONG GetStorageLength(void* DriveManagerHandle, StorageTypes StorageType, ULONG* Length);
   LONG ActivateJogging(void* DriveManagerHandle, JogDirections JogDirection, unsigned short JogSelection);
   LONG EnterMode(void* DriveManagerHandle, EnterModes Mode, LoopConfigurations LoopConfiguration, BOOL  Enter);
   void SetErrorCallback(void* DriveManagerHandle, void*DriveManagerPtr, void(*ErrorCallback)(void* DriveManagerHandle, int ErrorCode, int ErrorValue));
   void* CreateDriveManager();
   void DeleteDriveManager(void* DriveManagerHandle);
   void EmptyFirmwareBurnData(void* DriveManagerHandle);
   ULONG MessageVerifiedSentStatus(void* DriveManagerHandle, ULONG Handle, ULONG* MessageStatus, ULONG TimeOut);
   BOOL WriteParameterVerifiedToDrive(void* DriveManagerHandle, ULONG Command, ULONG* Handle);
   BOOL ReadParameterVerifiedFromDrive(void* DriveManagerHandle, ULONG Command, ULONG* Handle);
   CHAR IsDriveProjectVersionEarlierThan(void* DriveManagerHandle, ProjectVersions ProjectVersion);
   unsigned int GenerateSerialCommands(void* DriveManagerHandle, std::string ProjectFileName, std::string SerialCommandFileName);